name: "Build multi-arch Docker images"

on:
  push:
    tags:
      - "v*.*.*"
      - "nightly"

jobs:
  image-info:
    name: "Extract image info"
    runs-on: "ubuntu-latest"
    outputs:
      repo: ${{ steps.derive.outputs.repo }}
      tag: ${{ steps.derive.outputs.tag }}
      git_tag: ${{ steps.derive.outputs.git_tag }}

    env:
      DOCKER_REPOSITORY: "starknet/graph-node"

    steps:
      - id: "derive"
        name: "Derive image info from Git tag"
        run: |
          echo "repo=${DOCKER_REPOSITORY}" >> $GITHUB_OUTPUT

          version_line="${{ github.ref }}"
          regex="^refs\/tags\/(.*)$"
          [[ $version_line =~ $regex ]];
          FULL_TAG=${BASH_REMATCH[1]}
          echo "git_tag=$FULL_TAG" >> $GITHUB_OUTPUT

          if [ "$FULL_TAG" == "nightly" ]; then
              VERSION="nightly"
          else
              regex="^refs\/tags\/v(.*)$"
              [[ $version_line =~ $regex ]];
              VERSION=${BASH_REMATCH[1]}
          fi
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

  build-amd64:
    name: "Build for linux/amd64"
    runs-on: "ubuntu-larger"
    needs:
      - "image-info"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Set determine image meta"
        run: |
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "TAG_NAME=${{ needs.image-info.outputs.git_tag }}" >> $GITHUB_ENV
          echo "REPO_NAME=github_starknet-graph_graph-node" >> $GITHUB_ENV
          echo "BRANCH_NAME=" >> $GITHUB_ENV

      - name: "Build Docker image (graph-node-build)"
        run: |
          docker build --target graph-node-build \
              --build-arg COMMIT_SHA=$COMMIT_SHA \
              --build-arg REPO_NAME=$REPO_NAME \
              --build-arg BRANCH_NAME=$BRANCH_NAME \
              --build-arg TAG_NAME=$TAG_NAME \
              -t graph-node-build \
              -f docker/Dockerfile .

      - name: "Build Docker image (graph-node)"
        run: |
          docker build --target graph-node \
              --build-arg COMMIT_SHA=$COMMIT_SHA \
              --build-arg REPO_NAME=$REPO_NAME \
              --build-arg BRANCH_NAME=$BRANCH_NAME \
              --build-arg TAG_NAME=$TAG_NAME \
              -t ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}-amd64 \
              -f docker/Dockerfile .

      - name: "Export Docker image"
        run: |
          docker save ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}-amd64 | gzip > /tmp/amd64.tar.gz

      - name: "Upload Docker image artifact"
        uses: "actions/upload-artifact@v3"
        with:
          name: "amd64.tar.gz"
          path: "/tmp/amd64.tar.gz"

  build-arm64:
    name: "Build for linux/arm64"
    runs-on: "ubuntu-larger"
    needs:
      - "image-info"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Set determine image meta"
        run: |
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "TAG_NAME=${{ needs.image-info.outputs.git_tag }}" >> $GITHUB_ENV
          echo "REPO_NAME=github_starknet-graph_graph-node" >> $GITHUB_ENV
          echo "BRANCH_NAME=" >> $GITHUB_ENV

      - name: "Set up Docker Buildx"
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          sudo systemctl restart docker
          docker buildx create --name multi_builder
          docker buildx use multi_builder

      - name: "Build Docker image (graph-node-build)"
        run: |
          docker buildx build --target graph-node-build \
              --platform "linux/arm64/v8" \
              --output=type=docker \
              --build-arg COMMIT_SHA=$COMMIT_SHA \
              --build-arg REPO_NAME=$REPO_NAME \
              --build-arg BRANCH_NAME=$BRANCH_NAME \
              --build-arg TAG_NAME=$TAG_NAME \
              -t graph-node-build \
              -f docker/Dockerfile .

      - name: "Build Docker image (graph-node)"
        run: |
          docker buildx build --target graph-node \
              --platform "linux/arm64/v8" \
              --output=type=docker \
              --build-arg COMMIT_SHA=$COMMIT_SHA \
              --build-arg REPO_NAME=$REPO_NAME \
              --build-arg BRANCH_NAME=$BRANCH_NAME \
              --build-arg TAG_NAME=$TAG_NAME \
              -t ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}-arm64 \
              -f docker/Dockerfile .

      - name: "Export Docker image"
        run: |
          docker save ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}-arm64 | gzip > /tmp/arm64.tar.gz

      - name: "Upload Docker image artifact"
        uses: "actions/upload-artifact@v3"
        with:
          name: "arm64.tar.gz"
          path: "/tmp/arm64.tar.gz"

  push:
    name: "Push Docker images"
    runs-on: "ubuntu-latest"
    needs:
      - "image-info"
      - "build-amd64"
      - "build-arm64"

    steps:
      - name: "Download linux/amd64 image"
        uses: "actions/download-artifact@v3"
        with:
          name: "amd64.tar.gz"
          path: "/tmp/"

      - name: "Download linux/arm64/v8 image"
        uses: "actions/download-artifact@v3"
        with:
          name: "arm64.tar.gz"
          path: "/tmp/"

      - name: "Load Docker images"
        run: |
          docker load < /tmp/amd64.tar.gz
          docker load < /tmp/arm64.tar.gz

      - name: "Login to Docker Hub"
        uses: "docker/login-action@v1.6.0"
        with:
          username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          password: "${{ secrets.DOCKER_HUB_PASSWORD }}"

      - name: "Push Docker images"
        run: |
          docker push ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}-amd64
          docker push ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}-arm64
          docker manifest create ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }} \
            ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}-amd64 \
            ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}-arm64
          docker manifest push ${{ needs.image-info.outputs.repo }}:${{ needs.image-info.outputs.tag }}
